generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  clerkId            String             @unique
  email              String             @unique
  name               String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  role               UserRole           @default(USER)
  isDonor            Boolean            @default(false)
  signupReason       SignupReason?      @default(OTHER)
  activities         Activity[]
  events             ApplicationEvent[]
  applications       Application[]
  Company            Company[]          @relation("CreatedCompanies")
  contacts           Contact[]
  FeatureRequest     FeatureRequest[]
  interviews         Interview[]
  notes              Note[]
  Offer              Offer[]
  onboardingComplete Boolean            @default(false)
  UserPreferences    UserPreference[]

  Resume Resume[]
}

model UserPreference {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  configName  String
  configValue Json
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, configName])
  @@map("user_preferences")
}

model Company {
  id                   String            @id @default(cuid())
  name                 String
  website              String?
  description          String?
  plainTextDescription String?
  industry             String?
  size                 CompanySize?
  location             String?
  logo                 String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  isGlobal             Boolean           @default(false)
  createdBy            String?
  visibility           CompanyVisibility @default(PRIVATE)
  activities           Activity[]
  applications         Application[]
  creator              User?             @relation("CreatedCompanies", fields: [createdBy], references: [id])
  contacts             Contact[]
  notes                Note[]

  @@map("companies")
}

model FeatureRequest {
  id          String               @id @default(cuid())
  description String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  userId      String
  status      FeatureRequestStatus @default(PENDING)
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("feature_requests")
}

model Application {
  id                 String             @id @default(cuid())
  title              String
  description        String?
  jobUrl             String?
  lowSalary          Int?
  highSalary         Int?
  currency           String             @default("USD")
  location           String?
  remote             RemoteType?
  status             ApplicationStatus  @default(APPLIED)
  appliedAt          DateTime
  referredBy         String?
  firstResponseAt    DateTime?
  interviewInviteAt  DateTime?
  firstInterviewAt   DateTime?
  finalDecisionAt    DateTime?
  lastContactAt      DateTime?
  responseTimeHours  Int?
  interviewTimeHours Int?
  totalProcessHours  Int?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userId             String
  companyId          String
  activities         Activity[]
  events             ApplicationEvent[]
  company            Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews         Interview[]
  notes              Note[]
  Offer              Offer[]
  archived           Boolean            @default(false)

  resumeId        String?
  connectedResume Resume? @relation(fields: [resumeId], references: [id])

  @@map("applications")
}

model Resume {
  id        String   @id @default(cuid())
  name      String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  Application Application[]

  @@index([userId, createdAt])
  @@unique([name, userId, url])
  @@map("resumes")
}

model Contact {
  id         String      @id @default(cuid())
  name       String
  email      String?
  phone      String?
  title      String?
  linkedin   String?
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  userId     String
  companyId  String?
  activities Activity[]
  company    Company?    @relation(fields: [companyId], references: [id])
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  interviews Interview[] @relation("ContactToInterview")

  @@map("contacts")
}

model Interview {
  id            String            @id @default(cuid())
  type          InterviewType
  format        InterviewFormat
  meetingLink   String?
  scheduledAt   DateTime?
  duration      Int?
  feedback      String?
  outcome       InterviewOutcome?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  applicationId String
  userId        String
  activities    Activity[]
  application   Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes         Note[]
  contacts      Contact[]         @relation("ContactToInterview")
  archived      Boolean           @default(false)

  @@map("interviews")
}

model Note {
  id            String       @id @default(cuid())
  content       String
  type          NoteType     @default(GENERAL)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userId        String
  companyId     String?
  applicationId String?
  interviewId   String?
  activities    Activity[]
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  company       Company?     @relation(fields: [companyId], references: [id])
  interview     Interview?   @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Offer {
  id                      String      @id @default(cuid())
  title                   String
  description             String?
  status                  OfferStatus @default(PENDING)
  baseSalary              Int?
  currency                String      @default("USD")
  salaryType              SalaryType  @default(ANNUAL)
  signingBonus            Int?
  annualBonus             Int?
  bonusType               BonusType?
  bonusDetails            String?
  hasEquity               Boolean     @default(false)
  equityType              EquityType?
  equityAmount            Int?
  equityValue             Int?
  equityVesting           String?
  strikePrice             Int?
  location                String?
  remote                  RemoteType?
  startDate               DateTime?
  department              String?
  reportingTo             String?
  healthInsurance         Boolean     @default(false)
  dentalInsurance         Boolean     @default(false)
  visionInsurance         Boolean     @default(false)
  retirement401k          Boolean     @default(false)
  retirementMatch         String?
  paidTimeOff             String?
  sickLeave               String?
  parentalLeave           String?
  lifeInsurance           Boolean     @default(false)
  disabilityInsurance     Boolean     @default(false)
  flexibleSchedule        Boolean     @default(false)
  workFromHome            Boolean     @default(false)
  professionalDevelopment String?
  gymMembership           Boolean     @default(false)
  commuter                String?
  meals                   String?
  equipment               String?
  otherBenefits           String[]
  receivedAt              DateTime?
  expiresAt               DateTime?
  respondedAt             DateTime?
  acceptedAt              DateTime?
  declinedAt              DateTime?
  notes                   String?
  negotiationNotes        String?
  comparisonNotes         String?
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  userId                  String
  applicationId           String
  activities              Activity[]
  application             Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user                    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("offers")
}

model ApplicationEvent {
  id            String      @id @default(cuid())
  type          EventType
  title         String
  content       String?
  occurredAt    DateTime
  source        EventSource
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  userId        String
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("application_events")
}

model Activity {
  id            String             @id @default(cuid())
  type          ActivityType
  action        String
  entityType    EntityType
  entityId      String
  entityName    String?
  description   String
  metadata      Json?
  fromStatus    ApplicationStatus?
  toStatus      ApplicationStatus?
  isProgression Boolean?
  stageOrder    Int?
  ipAddress     String?
  userAgent     String?
  platform      Platform?
  createdAt     DateTime           @default(now())
  userId        String
  applicationId String?
  companyId     String?
  contactId     String?
  interviewId   String?
  noteId        String?
  offerId       String?
  application   Application?       @relation(fields: [applicationId], references: [id])
  company       Company?           @relation(fields: [companyId], references: [id])
  contact       Contact?           @relation(fields: [contactId], references: [id])
  interview     Interview?         @relation(fields: [interviewId], references: [id])
  note          Note?              @relation(fields: [noteId], references: [id])
  offer         Offer?             @relation(fields: [offerId], references: [id])
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, entityType, createdAt])
  @@index([userId, type, createdAt])
  @@index([userId, fromStatus, toStatus])
  @@index([userId, toStatus, createdAt])
  @@index([applicationId, type, createdAt])
  @@index([type, fromStatus, toStatus])
  @@map("activities")
}

enum UserRole {
  USER
  ADMIN
}

enum CompanyVisibility {
  PUBLIC
  PRIVATE
  GLOBAL
}

enum ApplicationStatus {
  DRAFT
  APPLIED
  CONFIRMATION_RECEIVED
  UNDER_REVIEW
  PHONE_SCREEN
  TECHNICAL_INTERVIEW
  ONSITE_INTERVIEW
  REFERENCE_CHECK
  OFFER_RECEIVED
  OFFER_NEGOTIATING
  ACCEPTED
  REJECTED
  WITHDRAWN
  GHOSTED
  POSITION_FILLED
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum RemoteType {
  ON_SITE
  HYBRID
  REMOTE
  FLEXIBLE
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  PAIR_PROGRAMMING
  ONSITE
  FINAL_ROUND
  REFERENCE_CHECK
  OTHER
}

enum InterviewFormat {
  PHONE
  VIDEO
  IN_PERSON
  CODING_PLATFORM
  TAKE_HOME
  OTHER
}

enum InterviewOutcome {
  PASSED
  FAILED
  PENDING
  CANCELLED
  RESCHEDULED
}

enum NoteType {
  GENERAL
  INTERVIEW_PREP
  FEEDBACK
  FOLLOW_UP
  SALARY_NEGOTIATION
  OFFER_DETAILS
}

enum OfferStatus {
  PENDING
  ACCEPTED
  DECLINED
  NEGOTIATING
  EXPIRED
  WITHDRAWN
  COUNTERED
}

enum SalaryType {
  ANNUAL
  HOURLY
  CONTRACT
  COMMISSION
  MONTHLY
  WEEKLY
  DAILY
}

enum BonusType {
  FIXED
  PERFORMANCE
  TARGET
  RETENTION
  RELOCATION
  ANNUAL
  QUARTERLY
}

enum EquityType {
  STOCK_OPTIONS
  RSU
  ESPP
  PHANTOM_STOCK
  PROFIT_SHARING
  EQUITY_GRANT
  WARRANTS
  CARRY
}

enum EventType {
  APPLICATION_SUBMITTED
  CONFIRMATION_RECEIVED
  RESUME_REVIEWED
  PHONE_SCREEN_INVITE
  PHONE_SCREEN_COMPLETED
  TECHNICAL_INVITE
  TECHNICAL_COMPLETED
  ONSITE_INVITE
  ONSITE_COMPLETED
  REFERENCE_CHECK
  OFFER_RECEIVED
  OFFER_ACCEPTED
  REJECTION_RECEIVED
  POSITION_FILLED
  WITHDRAWN
  FOLLOW_UP_SENT
  FOLLOW_UP_RECEIVED
  NEGOTIATION_STARTED
  CONTRACT_SENT
  OTHER
}

enum FeatureRequestStatus {
  PENDING
  IMPLEMENTED
  ADDED_TO_ROADMAP
  REJECTED
}

enum EventSource {
  EMAIL
  PHONE_CALL
  LINKEDIN
  JOB_PORTAL
  IN_PERSON
  TEXT_MESSAGE
  VIDEO_CALL
  RECRUITER
  REFERRAL
  OTHER
}

enum SignupReason {
  BETWEEN_JOBS
  JUST_GRADUATED
  EMPLOYED_AND_LOOKING
  OTHER
}

enum ActivityType {
  ACCOUNT_CREATED
  PROFILE_UPDATED
  SETTINGS_CHANGED
  PASSWORD_CHANGED
  APPLICATION_CREATED
  APPLICATION_UPDATED
  APPLICATION_DELETED
  APPLICATION_VIEWED
  APPLICATION_STATUS_CHANGED
  APPLICATION_ARCHIVED
  COMPANY_CREATED
  COMPANY_UPDATED
  COMPANY_DELETED
  COMPANY_VIEWED
  CONTACT_CREATED
  CONTACT_UPDATED
  CONTACT_DELETED
  CONTACT_VIEWED
  INTERVIEW_CREATED
  INTERVIEW_UPDATED
  INTERVIEW_DELETED
  INTERVIEW_COMPLETED
  INTERVIEW_SCHEDULED
  INTERVIEW_RESCHEDULED
  INTERVIEW_CANCELLED
  NOTE_CREATED
  NOTE_UPDATED
  NOTE_DELETED
  NOTE_VIEWED
  OFFER_CREATED
  OFFER_UPDATED
  OFFER_DELETED
  OFFER_ACCEPTED
  OFFER_DECLINED
  OFFER_NEGOTIATED
  RESUME_UPLOADED
  RESUME_UPDATED
  RESUME_DELETED
  DOCUMENT_VIEWED
  DASHBOARD_VIEWED
  ANALYTICS_VIEWED
  REPORT_GENERATED
  DATA_EXPORTED
  FEATURE_REQUEST_CREATED
  FEATURE_REQUEST_UPDATED
  LOGIN
  LOGOUT
  SESSION_EXPIRED
  DATA_SHARED
  PERMISSIONS_CHANGED
  OTHER
}

enum EntityType {
  USER
  APPLICATION
  COMPANY
  CONTACT
  INTERVIEW
  NOTE
  OFFER
  FEATURE_REQUEST
  DOCUMENT
  DASHBOARD
  SETTINGS
  OTHER
}

enum Platform {
  WEB
  MOBILE_IOS
  MOBILE_ANDROID
  API
  OTHER
}
