name: Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches-ignore:
      - main
jobs:
  deploy_preview:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.deploy_preview.outputs.url }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel and Set Preview URL
        id: deploy_preview
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Raw deployment URL: '$DEPLOYMENT_URL'"
          if [ -z "$DEPLOYMENT_URL" ]; then
            echo "ERROR: Deployment URL is empty!"
            exit 1
          fi
          PREVIEW_URL="${DEPLOYMENT_URL}?x-vercel-protection-bypass=${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}"
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "Preview URL: $PREVIEW_URL"
          # Clear any existing output and set fresh output
          echo "url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "Output file after writing:"
          cat $GITHUB_OUTPUT

      # Debug step to verify output
      - name: Debug - Check step output
        run: |
          echo "Step output preview_url: '${{ steps.deploy_preview.outputs.preview_url }}'"
          echo "Contents of GITHUB_OUTPUT file:"
          cat $GITHUB_OUTPUT || echo "GITHUB_OUTPUT file not found"
          echo "All step outputs:"
          echo '${{ toJSON(steps.deploy_preview.outputs) }}'

      # Wait for deployment to be ready
      - run: sleep 30

  cypress-e2e-tests:
    needs: [deploy_preview]
    runs-on: ubuntu-latest
    steps:
      - name: Debug - Check received outputs
        run: |
          echo "All outputs from deploy_preview job:"
          echo "output1: '${{ needs.deploy_preview.outputs.output1 }}'"
          echo "Available outputs: ${{ toJSON(needs.deploy_preview.outputs) }}"

      - env:
          PREVIEW_URL: ${{ needs.deploy_preview.outputs.output1 }}
        run: |
          echo "Preview URL: $PREVIEW_URL"
          if [ -z "$PREVIEW_URL" ]; then
            echo "ERROR: Preview URL is empty!"
            exit 1
          fi

      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # For Turborepo monorepo - install dependencies at root
      - name: Install dependencies
        run: npm ci

      # Wait for deployment to be fully ready (optional but recommended)
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          echo "Preview URL from job output: '${{ needs.deploy_preview.outputs.output1 }}'"
          if [ -z "${{ needs.deploy_preview.outputs.output1 }}" ]; then
            echo "ERROR: Preview URL is empty!"
            exit 1
          fi
          npx wait-on "${{ needs.deploy_preview.outputs.output1 }}" -t 60000

      # Run Cypress tests against the preview URL
      - name: Run Cypress E2E tests
        run: |
          cd apps/e2e
          echo "Using baseUrl: ${{ needs.deploy_preview.outputs.output1 }}"
          npx cypress run \
            --config baseUrl="${{ needs.deploy_preview.outputs.output1 }}" \
            --spec "cypress/e2e/smoke/**/*.cy.{js,ts},cypress/e2e/critical/**/*.cy.{js,ts}" \
            --browser chrome
        env:
          # Add any environment variables your tests need
          CLERK_USERNAME: ${{ secrets.CLERK_USERNAME }}
          CLERK_PASSWORD: ${{ secrets.CLERK_PASSWORD }}
          CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      # Optional: Comment on PR with test results
      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const previewUrl = '${{ needs.deploy_preview.outputs.output1 }}';
            const emoji = status === 'success' ? '✅' : '❌';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **E2E Tests ${status}**\n\nPreview URL: ${previewUrl}\n\n[View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            })
