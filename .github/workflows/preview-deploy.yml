name: Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  push:
    branches-ignore:
      - main
jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    outputs:
      preview-url: ${{ steps.set_output.outputs.preview-url }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

      # Wait for deployment to be ready
      - run: sleep 30

      # Get the preview URL using the zentered action
      - name: Get Vercel Preview URL
        uses: zentered/vercel-preview-url@v1.1.9
        id: vercel_preview_url
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        with:
          vercel_project_id: ${{ secrets.VERCEL_PROJECT_ID }}

      # Set the preview URL as job output
      - name: Set Preview URL Output
        id: set_output
        run: |
          echo "preview-url=https://${{ steps.vercel_preview_url.outputs.preview_url }}?x-vercel-protection-bypass=${{ secrets.VERCEL_AUTOMATION_BYPASS_SECRET }}" >> $GITHUB_OUTPUT
          echo "Preview URL: ${{ steps.vercel_preview_url.outputs.preview_url }}"

  Cypress-E2E-Tests:
    needs: Deploy-Preview
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # For Turborepo monorepo - install dependencies at root
      - name: Install dependencies
        run: npm ci

      # Wait for deployment to be fully ready (optional but recommended)
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          echo "Preview URL: ${{ needs.Deploy-Preview.outputs.preview-url }}"
          npx wait-on ${{ needs.Deploy-Preview.outputs.preview-url }} -t 60000

      # Run Cypress tests against the preview URL
      - name: Run Cypress E2E tests
        run: |
          cd apps/e2e
          npx cypress run \
            --config baseUrl=${{ needs.Deploy-Preview.outputs.preview-url }} \
            --spec "cypress/e2e/smoke/**/*.cy.{js,ts},cypress/e2e/critical/**/*.cy.{js,ts}" \
            --browser chrome
        env:
          # Add any environment variables your tests need
          CLERK_USERNAME: ${{ secrets.CLERK_USERNAME }}
          CLERK_PASSWORD: ${{ secrets.CLERK_PASSWORD }}
          CLERK_PUBLISHABLE_KEY: ${{ secrets.CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

      # Optional: Comment on PR with test results
      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const previewUrl = '${{ needs.Deploy-Preview.outputs.preview-url }}';
            const emoji = status === 'success' ? '✅' : '❌';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **E2E Tests ${status}**\n\nPreview URL: ${previewUrl}\n\n[View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            })
