// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  clerkId      String        @unique
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         UserRole      @default(USER)
  isDonor      Boolean       @default(false)
  signupReason SignupReason? @default(OTHER)

  // Relations
  applications Application[]
  contacts     Contact[]
  notes        Note[]
  interviews   Interview[]
  events       ApplicationEvent[]
  statusTransitions ApplicationStatusTransition[]

  Offer Offer[]

  Company Company[] @relation("CreatedCompanies")

  FeatureRequest FeatureRequest[]
}

model Company {
  id          String       @id @default(cuid())
  name        String
  website     String?
  description String?
  industry    String?
  size        CompanySize?
  location    String?
  logo        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  isGlobal   Boolean           @default(false)
  createdBy  String?
  visibility CompanyVisibility @default(PRIVATE)

  // Relations
  applications Application[]
  contacts     Contact[]
  creator      User?         @relation("CreatedCompanies", fields: [createdBy], references: [id], onDelete: SetNull)

  @@map("companies")
}

model FeatureRequest {
  id String @id @default(cuid())
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    FeatureRequestStatus @default(PENDING)

  @@map("feature_requests")
}

model Application {
  id          String            @id @default(cuid())
  title       String
  description String?
  jobUrl      String?
  lowSalary   Int? // Salary range minimum in dollars
  highSalary  Int? // Salary range maximum in dollars
  currency    String            @default("USD") // Currency code (USD, EUR, etc.)
  location    String?
  remote      RemoteType?
  status      ApplicationStatus @default(APPLIED)
  appliedAt   DateTime
  resume      String? // R2 object key for the uploaded resume
  resumeName  String? // Original filename of the resume
  referredBy  String? // Who referred you to this job

  // Response Timing Fields
  firstResponseAt   DateTime? // When company first responded (any communication)
  interviewInviteAt DateTime? // When first interview was offered
  firstInterviewAt  DateTime? // When first interview was scheduled
  finalDecisionAt   DateTime? // When final decision was communicated
  lastContactAt     DateTime? // Most recent communication from company

  // Metrics helpers (automatically calculated)
  responseTimeHours  Int? // Hours between appliedAt and firstResponseAt
  interviewTimeHours Int? // Hours between firstResponseAt and firstInterviewAt
  totalProcessHours  Int? // Hours between appliedAt and finalDecisionAt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  companyId String

  // Relations
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviews Interview[]
  notes      Note[]
  Offer      Offer[]
  events     ApplicationEvent[] // Track all communication events
  statusTransitions ApplicationStatusTransition[] // Track status progression for sankey diagrams

  @@map("applications")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  title     String?
  linkedin  String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId    String
  companyId String?

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company    Company?    @relation(fields: [companyId], references: [id], onDelete: SetNull)
  interviews Interview[]

  @@map("contacts")
}

model Interview {
  id          String            @id @default(cuid())
  type        InterviewType
  format      InterviewFormat
  meetingLink String?
  scheduledAt DateTime?
  duration    Int? // in minutes
  feedback    String?
  outcome     InterviewOutcome?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Foreign keys
  applicationId String
  userId        String

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  notes       Note[]

  @@map("interviews")
}

model Note {
  id        String   @id @default(cuid())
  content   String
  type      NoteType @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId        String
  applicationId String?
  interviewId   String?

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interview   Interview?   @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Offer {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      OfferStatus @default(PENDING)

  // Compensation Details
  baseSalary Int? // Annual base salary in cents to avoid floating point issues
  currency   String     @default("USD")
  salaryType SalaryType @default(ANNUAL) // Annual, hourly, contract, etc.

  // Bonus Information
  signingBonus Int? // One-time signing bonus in cents
  annualBonus  Int? // Expected annual bonus in cents
  bonusType    BonusType? // Fixed, performance-based, etc.
  bonusDetails String? // Additional bonus information

  // Equity/Stock Information
  hasEquity     Boolean     @default(false)
  equityType    EquityType? // Stock options, RSUs, etc.
  equityAmount  Int? // Number of shares/units
  equityValue   Int? // Estimated value in cents
  equityVesting String? // Vesting schedule details
  strikePrice   Int? // For stock options, in cents

  // Work Details
  location    String?
  remote      RemoteType?
  startDate   DateTime?
  department  String?
  reportingTo String? // Manager/supervisor name or title

  // Benefits & Perks
  healthInsurance         Boolean  @default(false)
  dentalInsurance         Boolean  @default(false)
  visionInsurance         Boolean  @default(false)
  retirement401k          Boolean  @default(false)
  retirementMatch         String? // e.g., "50% up to 6%"
  paidTimeOff             String? // e.g., "20 days"
  sickLeave               String?
  parentalLeave           String?
  lifeInsurance           Boolean  @default(false)
  disabilityInsurance     Boolean  @default(false)
  flexibleSchedule        Boolean  @default(false)
  workFromHome            Boolean  @default(false)
  professionalDevelopment String? // Training budget, conferences, etc.
  gymMembership           Boolean  @default(false)
  commuter                String? // Transit stipend, parking, etc.
  meals                   String? // Free meals, stipend, etc.
  equipment               String? // Laptop, monitor allowance, etc.
  otherBenefits           String[] // Additional benefits as array

  // Offer Timeline
  receivedAt  DateTime?
  expiresAt   DateTime?
  respondedAt DateTime?
  acceptedAt  DateTime?
  declinedAt  DateTime?

  // Additional Information
  notes            String? // Any additional notes about the offer
  negotiationNotes String? // Notes about salary negotiation
  comparisonNotes  String? // Notes comparing to other offers

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId        String
  applicationId String

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("offers")
}

model ApplicationEvent {
  id         String      @id @default(cuid())
  type       EventType
  title      String // e.g., "Phone screen invitation", "Rejection email"
  content    String? // Email content, call notes, etc.
  occurredAt DateTime // When this event happened
  source     EventSource // How did you learn about this (email, call, portal, etc.)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Foreign keys
  applicationId String
  userId        String

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("application_events")
}

model ApplicationStatusTransition {
  id            String            @id @default(cuid())
  fromStatus    ApplicationStatus? // null for initial status (first transition to APPLIED)
  toStatus      ApplicationStatus
  transitionAt  DateTime          @default(now())
  reason        String?           // Optional reason for the transition
  isProgression Boolean           @default(true) // true for forward movement, false for rejections/withdrawals
  stageOrder    Int?              // Order in the typical flow (for sankey diagram positioning)
  createdAt     DateTime          @default(now())

  // Foreign keys
  applicationId String
  userId        String

  // Relations
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("application_status_transitions")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum CompanyVisibility {
  PUBLIC
  PRIVATE
  GLOBAL
}

enum ApplicationStatus {
  DRAFT // Application being prepared
  APPLIED // Application submitted
  CONFIRMATION_RECEIVED // Auto-confirmation received
  UNDER_REVIEW // Application under review
  PHONE_SCREEN // Phone screening stage
  TECHNICAL_INTERVIEW // Technical interview stage
  ONSITE_INTERVIEW // Final/onsite interview stage
  REFERENCE_CHECK // Reference check in progress
  OFFER_RECEIVED // Job offer received
  OFFER_NEGOTIATING // Negotiating offer terms
  ACCEPTED // Offer accepted
  REJECTED // Application rejected
  WITHDRAWN // Application withdrawn
  GHOSTED // No response from company
  POSITION_FILLED // Position filled by someone else
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum RemoteType {
  ON_SITE
  HYBRID
  REMOTE
  FLEXIBLE
}

enum InterviewType {
  PHONE_SCREEN
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  CODING_CHALLENGE
  PAIR_PROGRAMMING
  ONSITE
  FINAL_ROUND
  REFERENCE_CHECK
  OTHER
}

enum InterviewFormat {
  PHONE
  VIDEO
  IN_PERSON
  CODING_PLATFORM
  TAKE_HOME
  OTHER
}

enum InterviewOutcome {
  PASSED
  FAILED
  PENDING
  CANCELLED
  RESCHEDULED
}

enum NoteType {
  GENERAL
  INTERVIEW_PREP
  FEEDBACK
  FOLLOW_UP
  SALARY_NEGOTIATION
  OFFER_DETAILS
}

enum OfferStatus {
  PENDING // Offer received, no response yet
  ACCEPTED // Offer accepted
  DECLINED // Offer declined
  NEGOTIATING // Currently negotiating terms
  EXPIRED // Offer expired
  WITHDRAWN // Company withdrew the offer
  COUNTERED // Candidate made a counter offer
}

enum SalaryType {
  ANNUAL // Annual salary
  HOURLY // Hourly wage
  CONTRACT // Contract/project-based
  COMMISSION // Commission-based
  MONTHLY // Monthly salary
  WEEKLY // Weekly salary
  DAILY // Daily rate
}

enum BonusType {
  FIXED // Fixed amount bonus
  PERFORMANCE // Performance-based bonus
  TARGET // Target-based bonus
  RETENTION // Retention bonus
  RELOCATION // Relocation bonus
  ANNUAL // Annual bonus
  QUARTERLY // Quarterly bonus
}

enum EquityType {
  STOCK_OPTIONS // Stock options (ISO, NSO)
  RSU // Restricted Stock Units
  ESPP // Employee Stock Purchase Plan
  PHANTOM_STOCK // Phantom stock
  PROFIT_SHARING // Profit sharing
  EQUITY_GRANT // Direct equity grant
  WARRANTS // Stock warrants
  CARRY // Carried interest
}

enum EventType {
  APPLICATION_SUBMITTED // Initial application sent
  CONFIRMATION_RECEIVED // Auto-confirmation received
  RESUME_REVIEWED // HR reviewed resume
  PHONE_SCREEN_INVITE // Invitation to phone screen
  PHONE_SCREEN_COMPLETED // Phone screen done
  TECHNICAL_INVITE // Technical interview invitation
  TECHNICAL_COMPLETED // Technical interview done
  ONSITE_INVITE // Onsite/final interview invitation  
  ONSITE_COMPLETED // Onsite interview completed
  REFERENCE_CHECK // Reference check started
  OFFER_RECEIVED // Job offer received
  OFFER_ACCEPTED // Offer accepted
  REJECTION_RECEIVED // Rejection notification
  POSITION_FILLED // Position filled by someone else
  WITHDRAWN // Application withdrawn
  FOLLOW_UP_SENT // Follow-up message sent
  FOLLOW_UP_RECEIVED // Follow-up response received
  NEGOTIATION_STARTED // Salary negotiation started
  CONTRACT_SENT // Employment contract sent
  OTHER // Other communication
}

enum FeatureRequestStatus {
  PENDING
  IMPLEMENTED
  ADDED_TO_ROADMAP
  REJECTED
}

enum EventSource {
  EMAIL // Email communication
  PHONE_CALL // Phone call
  LINKEDIN // LinkedIn message
  JOB_PORTAL // Company job portal/ATS
  IN_PERSON // Face-to-face conversation
  TEXT_MESSAGE // SMS/text
  VIDEO_CALL // Video conference
  RECRUITER // Through recruiter
  REFERRAL // Through referral contact
  OTHER // Other source
}

enum SignupReason {
  BETWEEN_JOBS
  JUST_GRADUATED
  EMPLOYED_AND_LOOKING
  OTHER
}
